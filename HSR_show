import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap, BoundaryNorm, Normalize
import pandas as pd
import cartopy.crs as ccrs
import pyproj


#0. 피해지점
location=pd.read_csv('D:/이현지/2. 진종훈 팀장님/#2. 내배수/241008 피해지점 및 인근 관측소 매칭/location.csv', encoding='euc-kr')
loc_df=pd.DataFrame(location)
loc_df.drop(columns=loc_df.columns[7:11], inplace=True)
loc_df.rename(columns={'Unnamed: 5':'lon', 'Unnamed: 6':'lat'}, inplace=True)
loc_df


#1. 데이터 전처리
f_path='D:/이현지/2. 진종훈 팀장님/#2. 내배수/241008 피해지점 및 인근 관측소 매칭/241010 사례집 다운로드/1hrPCPH_2019071515.bin'

nx, ny = 2305, 2881

with open(f_path, 'rb') as f:
    file=f.read()

rdr=np.frombuffer(file, dtype=np.int16, offset=4).astype(np.float32).reshape(ny, nx)

null=(rdr<=-30000)
rdr[null]=np.nan
rdr /= 100
rdr.shape


#2. pyproj 라이브러리 사용하여 위경도 변환
cell_size=500
center_lat=38
center_lon=126
center_grid=(1681, 1121)

# 프로젝션 정의
projection = pyproj.Proj(proj='lcc', lat_1=30, lat_2=60, lat_0=center_lat, lon_0=center_lon, datum='WGS84')

# 격자 위치 계산
j_indices, i_indices = np.meshgrid(np.arange(nx), np.arange(ny))
x = (j_indices - center_grid[1]) * cell_size
y = (i_indices - center_grid[0]) * cell_size

# 프로젝션 변환 (벡터화된 함수 사용)
lon, lat = projection(x, y, inverse=True)

# 결과 확인
print("위도 배열:\n", lat)
print("경도 배열:\n", lon)


lat_flat=lat.flatten()
lon_flat=lon.flatten()

lat_lon=np.array(list(zip(lat_flat, lon_flat)))

print(lat_lon)


#3. 위치 데이터와 레이더 데이터를 DataFrame으로 변환
location_data = pd.DataFrame({
    'latitude': latitudes.flatten(),
    'longitude': longitudes.flatten(),
    'rdr_value': rdr.flatten()  # 레이더 데이터를 함께 포함
})

location_data


#4. 컬러바 생성 및 처리
kma_color=['#00c8ff', '#009bf5', '#0049f5', #청색
           '#00ff00', '#00be00', '#008c00', '#005a00', #녹색
           '#ffff00', '#ffdd1f', '#f9cb00', '#e0b900', '#ccaa00', #황색
           '#ff6600', '#ff3300', '#d20000', '#b40000', #적색
           '#dfa9ff', '#c969ff', '#b429ff', '#9300e4', #자색
           '#b3b4de', '#4c4eb1', '#000390' #남색
]

colormap_rain=ListedColormap(kma_color).with_extremes(over='#333333', under='#ffffff')

colormap_rain.set_bad([0,0,0,0])

bounds=np.array([
    0., 0.1, 0.5, 1.,
    2., 3., 4., 5., 
    6., 7., 8., 9., 10., 
    15., 20., 25., 30., 
    40., 50., 60., 70., 
    90., 110., 150.
])

norm=BoundaryNorm(boundaries=bounds, ncolors=len(colormap_rain.colors))

colormap_rain


colored_array=BoundaryNorm(boundaries=bounds, ncolors=len(colormap_rain.colors))(rdr)
colored_array=Normalize(0, len(colormap_rain.colors))(colored_array)
colored_array[null]=np.nan
colored_array=(colormap_rain(colored_array)*255).astype(np.uint8)

ticks=bounds[:]


#5. 새로운 맵 생성
fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(1, 1, 1, projection=ccrs.PlateCarree())

# coastline 추가
ax.coastlines()

# 레이더 데이터 시각화 (contourf 사용)
contour = ax.contourf(location_data['longitude'].values.reshape(ny, nx),
                       location_data['latitude'].values.reshape(ny, nx),
                       rdr, cmap=colormap_rain, levels=bounds, extend='both',
                       transform=ccrs.PlateCarree(), norm=norm)

# 색상 막대 추가
cbar = plt.colorbar(contour, ax=ax, ticks=ticks, orientation='vertical', pad=0.02, extend='both', extendrect=True)

# 제목 추가
ax.set_title('Radar Data Visualization')

# 플롯 보여주기
plt.show()
